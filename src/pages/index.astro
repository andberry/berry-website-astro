---
import BaseLayout from "@layouts/BaseLayout.astro";
import Container from "@components/utils/Container.astro";
import ImageBerryTwitter from "@images/berry-twitter.jpg";
import { Image } from "astro:assets";
import HeroTitle from "@components/typography/HeroTitle.astro";
import Copy from "@components/typography/Copy.astro";
import FancyText from "@components/typography/FancyText.astro";
import TechIcon from "@components/TechIcon.astro";
import H2 from "@components/typography/H2.astro";
import H3 from "@components/typography/H3.astro";
import H1 from "@components/typography/H1.astro";

// import SkillsAnimation from "@components/misc/SkillsGrid.astro";
---

<BaseLayout metaTitle="andberry.me">
  <article>
    <section
      class:list={[
        "relative min-h-[calc(100vh-80px)] flex items-center py-8 xl:py-12 2xl:py-24",
        "dark:bg-gradient-to-br from-black to-purpledark from-75% to-95%",
      ]}
    >
      <Container size="xxl">
        <div class="lg:grid lg:grid-cols-6 lg:gap-8">
          <div
            class="w-1/3 mx-auto py-0 lg:w-full lg:px-4 lg:py-0 lg:col-start-1 lg:col-span-1 max-lg:hidden"
          >
            <Image
              src={ImageBerryTwitter}
              alt="Berry"
              class="rounded-md"
              widths={[100, 200, 170, 340]}
              sizes={`(min-width: 1024px) 12vw, (min-width: 1440px) 170px, 0px`}
            />
          </div>

          <div class="lg:col-start-2 lg:col-span-5 relative">
            <HeroTitle class="text-center lg:text-left">
              <p>
                <span class="relative z-30">
                  Hi,{" "}
                </span>
                I&apos;m{" "}
                <FancyText variant="gradientPink2"> Berry! </FancyText>
              </p>
              <p class="mt-8">
                I&apos;m a <br class="md:hidden" />
                <FancyText variant="glowGreen">front-end</FancyText>{" "}
                developer,
                <br />
                and I love building{" "}<br />

                <FancyText variant="glowPink" additionalClass="js-scramble-text"
                  >Usable</FancyText
                >
                <br /><span class="js-reveal-text">&nbsp;</span>
              </p>
            </HeroTitle>
          </div>
        </div>
      </Container>
    </section>

    <section
      id="intro"
      class:list={[
        "flex flex-col gap-12 md:gap-16 pb-12 pt-24",
        "from-black to-purpledark from-75% to-95%",
        "dark:bg-gradient-to-tr",
        "relative lg:py-12 [text-wrap:balance]",
      ]}
    >
      <div>
        <Container>
          <div
            class="lg:grid lg:grid-cols-6 lg:gap-8 relative md:max-lg:px-16 u-anim--rfb"
          >
            <div class="intro__text lg:col-start-3 lg:col-span-4">
              <Copy size="large">
                I'm <FancyText
                  variant="gradientPink2"
                  additionalClass="font-medium">Andrea Berardi</FancyText
                >,
                <br />an <FancyText
                  variant="glowGreen"
                  additionalClass="font-medium">italian</FancyText
                > front-end developer with 10+ years of experience, currently located
                in Trento after living and working in <FancyText
                  variant="glowPink"
                  additionalClass="font-medium">Canada</FancyText
                > for 3 years.
              </Copy>
              <Copy size="large">
                <FancyText variant="gradientPink" additionalClass="font-medium"
                  >I build websites</FancyText
                >,
                <br /> and my main focus and experience is <FancyText
                  variant="glowGreen"
                  additionalClass="font-medium">front-end</FancyText
                > development.
              </Copy>
            </div>
          </div>
        </Container>
        <div
          class:list={[
            "hidden lg:block",
            "absolute h-full w-1/3 top-12 left-0",
            "bg-rgpointgreen bg-[length:16px_16px]",
            "[mask-image:radial-gradient(ellipse_at_center,rgba(0,0,0,1),transparent_75%)]",
            "opacity-50",
            "u-anim--parallax-up",
          ]}
        >
        </div>
      </div>

      <div class="relative lg:my-12 [text-wrap:balance]">
        <Container>
          <div
            class="lg:grid lg:grid-cols-6 lg:gap-8 relative md:max-lg:px-16 u-anim--rfb"
          >
            <div class="lg:col-start-1 lg:col-span-4">
              <Copy size="large">
                Content architecture, crafting <FancyText
                  variant="glowGreen"
                  additionalClass="font-medium">pixel-perfect</FancyText
                > responsive layouts with a <FancyText
                  variant="gradientPink2"
                  additionalClass="font-medium"
                  >meticulous attention to details</FancyText
                > and a strong focus on UI usability are my daily bread and butter.
              </Copy>
            </div>
          </div>
        </Container>
        <div
          class:list={[
            "hidden lg:block",
            "absolute h-full w-1/2 -top-36 right-0 border border-lime z-0",
            "bg-rgpointwhite bg-[length:16px_16px]",
            "[mask-image:radial-gradient(ellipse_at_80%_center,rgba(0,0,0,1),transparent_65%)]",
            "u-anim--parallax-down",
          ]}
        >
        </div>
      </div>

      <div class="relative lg:my-12 [text-wrap:balance] dark:fill-white">
        <Container size="xl" additionalClasses="text-center">
          <H2
            ><FancyText
              variant="gradientPink2"
              additionalClass="js-fst-title"
            />&nbsp;</H2
          >
          <Copy additionalClass="js-fst-text"
            >React, Next.js, Astro, Tailwind CSS, GSAP
          </Copy>
        </Container>
        <Container size="md" additionalClasses="text-center mt-8">
          <div class="grid grid-cols-3 md:grid-cols-6 gap-8 justify-center">
            <TechIcon
              additionalClass="js-fst-icon"
              icon="simple-icons:react"
              title="React"
            />
            <TechIcon
              additionalClass="js-fst-icon fill-black"
              icon="logos:nextjs-icon"
              title="Nextjs"
            />
            <TechIcon
              additionalClass="js-fst-icon"
              icon="mdi:tailwind"
              title="TailwindCSS"
            />
            <TechIcon
              additionalClass="js-fst-icon"
              icon="mdi:language-typescript"
              title="TypeScript"
            />
            <TechIcon
              additionalClass="js-fst-icon"
              icon="simple-icons:greensock"
              title="GSAP"
            />
            <TechIcon
              additionalClass="js-fst-icon"
              icon="simple-icons:astro"
              title="Astro"
            />
          </div>
        </Container>
      </div>

      <div class="relative lg:my-12 [text-wrap:balance]">
        <Container>
          <div
            class="lg:grid lg:grid-cols-6 lg:gap-8 relative md:max-lg:px-16 u-anim--rfb"
          >
            <div class="lg:col-start-4 lg:col-span-3">
              <Copy size="large">
                Use the right tool for the job, avoid over-engineering, and <FancyText
                  variant="glowPink"
                  additionalClass="font-medium">KISS over DRY</FancyText
                > are a few of my tech-decision pillars
              </Copy>
            </div>
          </div>
        </Container>
      </div>

      <div
        class="relative
                  lg:my-12
                  [text-wrap:balance]
                  xl:pb-24"
      >
        <Container>
          <div
            class="lg:grid lg:grid-cols-6 lg:gap-8 relative md:max-lg:px-16 u-anim--rfb-short z-10"
          >
            <div class="lg:col-start-1 lg:col-span-4">
              <Copy size="large">
                From small <FancyText variant="glowGreen"
                  >one-man-band</FancyText
                >
                projects,<br /> to medium or large size ones involving many developers,
                individual contributor or front-end
                <FancyText variant="glowGreen">team lead</FancyText>,
                <br />I'm always happy to contribute to the project,<br />and
                share my knowledge with <FancyText
                  variant="glowGreen"
                  additionalClass="font-medium"
                  >coaching sessions
                </FancyText>.
              </Copy>
            </div>
          </div>
          <div
            class:list={[
              "hidden lg:block",
              "absolute h-full w-1/2 top-0 right-0 border border-lime z-0",
              "bg-rgpointpink bg-[length:16px_16px]",
              "[mask-image:radial-gradient(ellipse_at_80%_center,rgba(0,0,0,1),transparent_65%)]",
              "u-anim--parallax-down",
            ]}
          >
          </div>
        </Container>
      </div>
    </section>
  </article>
</BaseLayout>

<script>
  import { gsap } from "gsap";
  import { ScrambleTextPlugin } from "gsap/ScrambleTextPlugin";
  import { TextPlugin } from "gsap/TextPlugin";
  import { ScrollToPlugin } from "gsap/ScrollToPlugin";
  gsap.registerPlugin(ScrambleTextPlugin, TextPlugin, ScrollToPlugin);

  const favouriteStackAnimation = () => {
    const titleEl = document.querySelector(".js-fst-title");
    const textEl = document.querySelector(".js-fst-text");
    const iconEls = document.querySelectorAll(".js-fst-icon");

    if (!titleEl || !textEl || !iconEls) {
      return null;
    }

    const tl = gsap.timeline({
      paused: true,
      delay: 1,
      defaults: { ease: "power3.out", duration: 0.8 },
    });

    tl.to(titleEl, {
      text: { value: "My favourite stack", speed: 1 },
      ease: "none",
    });
    tl.fromTo(
      iconEls,
      { opacity: 0, y: 10 },
      { opacity: 1, y: 0, stagger: 0.08, duration: 0.4, ease: "back.out(5)" },
      ">+0.5"
    );
    tl.fromTo(textEl, { opacity: 0 }, { opacity: 1 }, ">-0.8");

    tl.play();
  };

  const heroScrambleTextAnimation = () => {
    const scrambleEl = document.querySelector(".js-scramble-text");
    const revealTextEl = document.querySelector(".js-reveal-text");
    if (!scrambleEl || !revealTextEl) {
      return null;
    }

    const tl = gsap.timeline({
      paused: true,
      delay: 1,
      repeat: 0,
      repeatDelay: 2,
      defaults: { ease: "none", duration: 0.8 },
    });
    tl.fromTo(scrambleEl, { opacity: 0 }, { opacity: 1, duration: 0.6 });
    tl.to(scrambleEl, {
      scrambleText: { text: "Engaging", chars: "andberryme", speed: 2 },
    });
    tl.to(
      scrambleEl,
      {
        scrambleText: {
          text: "Maintainable",
          chars: "andberryme",
          speed: 2,
        },
      },
      ">+0.9"
    );
    tl.to(
      scrambleEl,
      {
        scrambleText: { text: "Beautiful", chars: "andberryme", speed: 2 },
      },
      ">+0.6"
    );
    tl.to(
      revealTextEl,
      {
        text: { value: "web projects.", speed: 1.5, preserveSpaces: true },
      },
      ">+0.3"
    );
    tl.to(
      revealTextEl,
      {
        text: {
          value: "webapps.",
          speed: 1.5,
          preserveSpaces: true,
          type: "diff",
        },
      },
      ">+0.3"
    );
    tl.to(
      revealTextEl,
      {
        text: { value: "websites.", speed: 1.5, preserveSpaces: true },
        // scroll to intro section only if user has not scrolled "too much"
        onComplete: () => {
          if (window.scrollY < 350) {
            document.querySelector("html")?.classList.remove("scroll-smooth");
            tl.to(
              window,
              {
                scrollTo: { y: "#intro", offsetY: 100, autoKill: true },
                ease: "power3.inOut",
                duration: 0.9,
                onComplete: () => {
                  document
                    .querySelector("html")
                    ?.classList.remove("scroll-smooth");
                },
              },
              ">+0.6"
            );
          }
        },
      },
      ">+0.3"
    );
    tl.play();
  };

  heroScrambleTextAnimation();
  favouriteStackAnimation();
</script>
